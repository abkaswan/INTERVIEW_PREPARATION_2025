https://leetcode.com/problems/linked-list-cycle/description/

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
Example 2:


Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
Example 3:


Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
 

Follow up: Can you solve it using O(1) (i.e. constant) memory?


____________
solution 1; 
1. use slow and fast pointers -- floyd's cycle-finding algo // 2 pointers or slow-fast pointers approach \
2. imagine this scenario ias if two people are running at x and 2x speed.
TC : O(n) and SC : O(1)
            

____________
solution 2:
While Floyd's Cycle Detection Algorithm (also known as the Tortoise and Hare algorithm) is widely used for detecting cycles in linked lists due to its simplicity and constant space complexity, 
there exists an alternative method called Brent's Cycle Detection Algorithm. 

Hint:

Consider an approach where one pointer moves at a constant speed, while the other pointer's speed increases exponentially (e.g., doubling each time). 
This method allows for efficient cycle detection by minimizing the number of steps needed to identify a loop.

This strategy is central to Brent's Cycle Detection Algorithm, which can be more efficient than Floyd's algorithm in specific cases.

TC : O(m+n) where m is smallest index of the sequence which is the beginning of a cycle , n is the cycle's length
SC : O(1)