LINK : https://www.geeksforgeeks.org/problems/check-if-there-exists-a-subsequence-with-sum-k/0

Given an array arr and target sum k, check whether there exists a subsequence such that the sum of all elements in the subsequence equals the given target sum(k).


Example:

Input:  arr = [10,1,2,7,6,1,5], k = 8.
Output:  Yes
Explanation:  Subsequences like [2, 6], [1, 7] sum upto 8

Input:  arr = [2,3,5,7,9], k = 100. 
Output:  No
Explanation:  No subsequence can sum upto 100
Your Task:
You don't need to read or print anything. Your task is to complete the boolean function checkSubsequenceSum() which takes N, arr and K as input parameter and returns true/false based on the whether any subsequence with sum K could be found.


Expected Time Complexity: O(N * K).
Expected Auxiliary Space: O(N * K).


Constraints:
1 <= arr.length <= 2000.
1 <= arr[i] <= 1000.
1 <= target <= 2000.


_____
many efficient approaches that you can use based on need : 
Pseudo-Polynomial 1D DP  
Time: O(n·k)  
Space: O(k)  

Bitset-Accelerated DP  
Time: O(n·(k/W)) where W is word‐size (e.g. 64)  
Space: O(k/W) words  

Meet-in-the-Middle  
Time: O(2^(n/2))  
Space: O(2^(n/2))  

Fully Polynomial-Time Approximation Scheme (FPTAS)  
Time: polynomial in n and 1/ε for a (1–ε)-approximation  
Space: polynomial in n and 1/ε  

Cutting-Edge Exact Algorithms  
– Koiliaris & Xu (2015): O(k √n) deterministic  
– Bringmann (2017): Õ(n + k) randomized  

Recommendation by scenario:  
• k ≤ 10^6, n up to a few thousand → Bitset DP  
• k very small, n large → 1D DP  
• n ≤ 40, k huge → Meet-in-the-Middle  
• k huge, approximate OK → FPTAS  
• Need fastest exact asymptotic → Koiliaris & Xu or Bringmann