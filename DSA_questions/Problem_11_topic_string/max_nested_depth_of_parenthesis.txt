https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/description/

1614. Maximum Nesting Depth of the Parentheses

Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.

 

Example 1:

Input: s = "(1+(2*3)+((8)/4))+1"

Output: 3

Explanation:

Digit 8 is inside of 3 nested parentheses in the string.

Example 2:

Input: s = "(1)+((2))+(((3)))"

Output: 3

Explanation:

Digit 3 is inside of 3 nested parentheses in the string.

Example 3:

Input: s = "()(())((()()))"

Output: 3

 

Constraints:

1 <= s.length <= 100
s consists of digits 0-9 and characters '+', '-', '*', '/', '(', and ')'.
It is guaranteed that parentheses expression s is a VPS.


method 1 : using stack 
Time Complexity:
We traverse the input string exactly once, performing O(1) work (stack push/pop, integer updates) per character.
→ O(n)

Space Complexity:
In the worst case , all characters are '(', the stack holds up to n elements.
→ O(n)

code for this : 
int maxDepth(string s) {
        // take a stack , enter the open paranthesis
        // pop it when there is closing parenthesis
        stack<char> res;
        int count = 0,maxcount = 0;
        for(char c : s)
        {
            if(c=='('){
                res.push('(');
                count+=1;
            }
            if(c==')')
            {
                res.pop();
                count-=1;
            }
            maxcount = max(count,maxcount);
        }
        return maxcount;
}

method 2 : using only 

only use maxcount and count.