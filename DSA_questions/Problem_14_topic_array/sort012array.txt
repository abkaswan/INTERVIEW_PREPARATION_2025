https://leetcode.com/problems/sort-colors/description/
75. Sort Colors

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?


____________
What Is the Dutch National Flag Algorithm?
The Dutch National Flag problem, posed by Edsger Dijkstra, asks you to sort an array of three distinct values (often 0, 1, 2) in a single pass and with O(1) extra space. 
It maintains three regions—“less than pivot,” “equal to pivot,” and “greater than pivot”—and uses three pointers (low, mid, high) to swap elements into their correct region as it traverses the array once

so by what you solved the problem is indeed dutch national flag algorithm.
____________

you can also think a generalize apporach like this :
General k-Color In-Place Counting
If you have k distinct values (e.g. colors 0…k−1), you can:
-->Allocate a small array cnt[k] on the stack.
-->One pass to count.
-->One pass to overwrite

void sortKColors(vector<int>& nums, int k) {
    vector<int> cnt(k, 0);
    for(int x: nums) ++cnt[x];
    int i=0;
    for(int color=0; color<k; ++color)
        for(int c=0; c<cnt[color]; ++c)
            nums[i++]=color;
}

Time: O(n + k).
Space: O(k), which is constant if k is fixed