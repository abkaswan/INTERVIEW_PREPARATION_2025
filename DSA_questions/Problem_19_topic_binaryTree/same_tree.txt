https://leetcode.com/problems/same-tree/description/

100. Same Tree

Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value

Example 1:


Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:


Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:


Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:

The number of nodes in both trees is in the range [0, 100].
-104 <= Node.val <= 104


___________________________________________________________________
Time Complexity O(n), where n is the total number of nodes in (the larger of) the two trees.
We perform a constant-time comparison at each node and recurse into its children exactly once 

Space Complexity : 
Best/Average Case – O(h):The maximum depth of the recursion equals the height h of the tree. For a balanced tree, h≈logn 
Worst Case – O(n): If the tree is completely unbalanced (i.e., every node has only one child), the height h becomes n, so the recursion stack can hold up to n nodes

___________________________________________________________________
for iterative approach: 

Time Complexity: O(K) where K = min(number of nodes in p, number of nodes in q).
If we assume N is the number of nodes in the smaller tree, then it's O(N).

Space Complexity: O(W) where W is the maximum width of the smaller of the two trees.
In the absolute worst case (e.g., a perfect or complete binary tree), W can be proportional to N (number of nodes in the smaller tree), specifically (N+1)/2. 
So, the worst-case space complexity can also be expressed as O(N).