---

## ðŸ”¹ 1. **Graph Traversal / Connectivity**

| Algorithm                                 | Graph Type                      | Used For                                                                               | Time Complexity                    | Space Complexity               | Notes / Use Cases                                                                                               |
| ----------------------------------------- | ------------------------------- | -------------------------------------------------------------------------------------- | ---------------------------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------- |
| **BFS (Breadth-First Search)**            | Directed/Undirected, Unweighted | Traversal, Connectivity check, Bipartite check, Shortest path in **unweighted graphs** | O(V + E)                           | O(V)                           | Also forms BFS tree; used in network broadcasting, level-order processing                                       |
| **DFS (Depth-First Search)**              | Directed/Undirected             | Traversal, Connectivity check, Topo sort, Cycle detection                              | O(V + E)                           | O(V) (recursion stack/visited) | Used for connected components, articulation points, bridges, strongly connected components (with modifications) |
| **Union-Find (Disjoint Set Union - DSU)** | Undirected                      | Connectivity, Cycle detection                                                          | \~O(Î±(V)) per op (almost constant) | O(V)                           | Faster than DFS/BFS in dynamic connectivity problems (Kruskalâ€™s, dynamic graphs)                                |

---

## ðŸ”¹ 2. **Cycle Detection**

| Algorithm                                      | Graph Type | Used For                                                       | Time Complexity | Space Complexity | Notes / Use Cases            |
| ---------------------------------------------- | ---------- | -------------------------------------------------------------- | --------------- | ---------------- | ---------------------------- |
| **DFS in Undirected Graph (parent check)**     | Undirected | Detect cycles                                                  | O(V + E)        | O(V)             | If neighbor â‰  parent â†’ cycle |
| **BFS in UG  parent check**                    | Undirected | Detect cycles                                                  | O(V + E)        | O(V)             | If neighbor â‰  parent â†’ cycle |
| **Union-Find (DSU)**                           | Undirected | Detect cycle                                                   | O(E \* Î±(V))    | O(V)             | Used in Kruskalâ€™s MST        |
| **DFS with visited states (white-gray-black)** | Directed   | Detect cycles                                                  | O(V + E)        | O(V)             | Standard approach            |
| **BFS (Kahnâ€™s Algo)**                          | Directed   | Detect cycle via topo sort (if topo sort fails â†’ cycle exists) | O(V + E)        | O(V)             | Used for DAG validation      |

---

## ðŸ”¹ 3. **Shortest Path**

| Algorithm                        | Graph Type                                     | Used For                    | Time Complexity  | Space Complexity | Notes / Use Cases              |
| -------------------------------- | ---------------------------------------------- | --------------------------- | ---------------- | ---------------- | ------------------------------ |
| **BFS (on unweighted graph)**    | Unweighted (directed/undirected)               | Single-source shortest path | O(V + E)         | O(V)             | Level = distance               |
| **Topo Sort + Relaxation (DAG)** | Directed Acyclic Graph                         | Single-source shortest path | O(V + E)         | O(V + E)         | Works only on DAGs             |
| **Dijkstraâ€™s Algorithm (PQ)**    | Weighted, non-negative                         | Single-source shortest path | O((V+E) log V)   | O(V + E)         | Classic, used in maps, routing |  --> i am here currently doing this one
| **Dijkstra (array version)**     | Weighted, non-negative                         | Single-source shortest path | O(VÂ² + E)        | O(V)             | Simpler but slower             |
| **Bellman-Ford**                 | Weighted (negative allowed)                    | Single-source shortest path | O(VÂ·E)           | O(V)             | Detects negative cycles        |
| **Floyd-Warshall**               | Weighted (negative allowed, no negative cycle) | All-pairs shortest path     | O(VÂ³)            | O(VÂ²)            | Dynamic programming            |
| **Johnsonâ€™s Algorithm**          | Weighted (negative allowed)                    | All-pairs shortest path     | O(VÂ² log V + VE) | O(VÂ²)            | Uses reweighting + Dijkstra    |

---

## ðŸ”¹ 4. **Minimum Spanning Tree (MST)**

| Algorithm                          | Graph Type           | Used For | Time Complexity         | Space Complexity | Notes / Use Cases                |
| ---------------------------------- | -------------------- | -------- | ----------------------- | ---------------- | -------------------------------- |
| **Primâ€™s Algorithm (min-heap)**    | Undirected, Weighted | MST      | O(E log V)              | O(V + E)         | Greedy; grows tree from one node |
| **Primâ€™s Algorithm (adj matrix)**  | Dense Graphs         | MST      | O(VÂ²)                   | O(VÂ²)            | Simpler for dense graphs         |
| **Kruskalâ€™s Algorithm (with DSU)** | Undirected, Weighted | MST      | O(E log E) â‰ˆ O(E log V) | O(V + E)         | Greedy; sorts edges              |
| **BorÅ¯vkaâ€™s Algorithm**            | Undirected, Weighted | MST      | O(E log V)              | O(V + E)         | Good for parallelization         |

---

## ðŸ”¹ 5. **Strongly Connected Components (SCC)**

| Algorithm                | Graph Type | Used For      | Time Complexity | Space Complexity | Notes / Use Cases          |
| ------------------------ | ---------- | ------------- | --------------- | ---------------- | -------------------------- |
| **Kosarajuâ€™s Algorithm** | Directed   | SCC detection | O(V + E)        | O(V + E)         | Uses 2 DFS passes          |
| **Tarjanâ€™s Algorithm**   | Directed   | SCC detection | O(V + E)        | O(V)             | Uses DFS + low-link values |

---

## ðŸ”¹ 6. **Advanced / Network Flow**

| Algorithm               | Graph Type                    | Used For              | Time Complexity | Space Complexity | Notes / Use Cases               |
| ----------------------- | ----------------------------- | --------------------- | --------------- | ---------------- | ------------------------------- |
| **Edmonds-Karp**        | Directed, weighted capacities | Max Flow              | O(VEÂ²)          | O(V+E)           | BFS based Ford-Fulkerson        |
| **Dinicâ€™s Algorithm**   | Directed, weighted capacities | Max Flow              | O(VÂ²E) (worst)  | O(V+E)           | Faster in practice              |
| **Push-Relabel**        | Directed, weighted capacities | Max Flow              | O(VÂ³)           | O(VÂ²)            | Very efficient for dense graphs |
| **Hungarian Algorithm** | Bipartite Graph               | Minimum Cost Matching | O(VÂ³)           | O(VÂ²)            | Assignment problems             |

---

