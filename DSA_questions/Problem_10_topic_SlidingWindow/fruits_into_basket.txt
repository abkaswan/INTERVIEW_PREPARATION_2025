https://leetcode.com/problems/fruit-into-baskets/description/
904. Fruit Into Baskets

You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.

You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:

You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.
Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.
Once you reach a tree with fruit that cannot fit in your baskets, you must stop.
Given the integer array fruits, return the maximum number of fruits you can pick.

Example 1:

Input: fruits = [1,2,1]
Output: 3
Explanation: We can pick from all 3 trees.
Example 2:

Input: fruits = [0,1,2,2]
Output: 3
Explanation: We can pick from trees [1,2,2].
If we had started at the first tree, we would only pick from trees [0,1].
Example 3:

Input: fruits = [1,2,3,2,2]
Output: 4
Explanation: We can pick from trees [2,3,2,2].
If we had started at the first tree, we would only pick from trees [1,2].
 

Constraints:

1 <= fruits.length <= 105
0 <= fruits[i] < fruits.length




_______
use sliding window approach : 
take two pointers , slide them accordingly 
take one hash map also to store the keys ,  if key is more than 2 then move left and decrease count
                                            if key is less or equeal to 2 then move right and increase the count

TC : O(n)+O(n) = O(2n)
SC : O(1) // only saving two indexes inside the map so constant time only will be happeing

____________________________
Micro-Optimized Implementation Without a Generic Map
Rather than a hash map, maintain:
val1, val2 — the two current distinct values (or a flag when only one is in the window).
count1, count2 — how many times each appears in the window.
lastPos1, lastPos2 — the most recent positions where each value appeared.
As you scan with right, update the matching pair. If a third value arrives, you can:
Shrink left directly to the minimum of lastPos1 and lastPos2 plus one (dropping all occurrences of whichever value appeared least recently).
Then reset that value’s count to zero and treat the new value as the second.
This avoids hash-map overhead while preserving O(n) time and O(1) space