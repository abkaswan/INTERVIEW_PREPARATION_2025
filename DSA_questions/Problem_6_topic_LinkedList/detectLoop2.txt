https://leetcode.com/problems/linked-list-cycle-ii/description/

Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
Example 2:


Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.
Example 3:


Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
 

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
 

Follow up: Can you solve it using O(1) (i.e. constant) memory?

____________
brute force > use map<ListNode,int> for this and find the starting point where the repeatation is happening for the first time 
but this takes O(n) TC and O(n) SC 
can we solve it using constant space O(1)?

Time Complexity of insert() and find() in std::unordered_map
1. Average Case: Both insert() and find() operations have an average time complexity of O(1). This efficiency is due to the underlying hash table structure, which allows for constant-time access when the hash function distributes keys uniformly across buckets.
2. Worst Case: In scenarios where many keys hash to the same bucket (i.e., hash collisions), the time complexity can degrade to O(n), where n is the number of elements in the map. Such collisions can occur if the hash function is poor or if the map has a high load facto

_____________
maybe use same slow and fast pointer approach. but how do we know the starting point in that case right ?
or another name for the slow-fast pointer approach is Floyd's Tortoise and Hare Algorithm

TC : O(n) and SC: O(1)