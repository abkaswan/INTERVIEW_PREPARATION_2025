https://takeuforward.org/plus/dsa/problems/count-all-subsequences-with-sum-k

Given an array nums and an integer k.Return the number of non-empty subsequences of nums such that the sum of all elements in the subsequence is equal to k.


Examples:
Input : nums = [4, 9, 2, 5, 1] , k = 10

Output : 2

Explanation : The possible subsets with sum k are [9, 1] , [4, 5, 1].

Input : nums = [4, 2, 10, 5, 1, 3] , k = 5

Output : 3

Explanation : The possible subsets with sum k are [4, 1] , [2, 3] , [5].


Constraints:
1 <= nums.length <= 20
1 <= nums[i] <= 100
1 <= k <= 2000

____________________________________
Time and Space Complexity Analysis of Recursive Subsequence Sum Code
--------------------------------------------------------------------

Function:
---------
The recursive function funo tries all subsequences of the given array to find how many have a sum equal to the target 'k'. At each index, it explores two possibilities:
- Include the current element.
- Exclude the current element.

Code:
-----
void funo(vector<int>& nums, int k, int i, int sum) {
    if (i == nums.size()) {
        if (sum == k) count++;
        return;
    }

    funo(nums, k, i + 1, sum + nums[i]); // include nums[i]
    funo(nums, k, i + 1, sum);           // exclude nums[i]
}

Time Complexity:
----------------
At each index 'i', the function makes two recursive calls: one for including nums[i], one for excluding it. So the total number of recursive calls grows exponentially.

- For 'n' elements, the total number of calls is 2^n.
- Each call does O(1) work (just parameter passing and condition checking).
- Therefore, the total time complexity is:

    O(2^n)

Explanation:
------------
Each element in the array has two choices (include or exclude), leading to 2^n possible subsets. Every subset is checked once.

Example:
---------
If nums = {4, 9, 2, 5, 1} → n = 5
Total subsets = 2^5 = 32

Space Complexity:
-----------------
The space complexity depends on the recursion call stack.

- The maximum depth of the recursion tree is 'n' (we go from index 0 to index n).
- No additional memory (like arrays or hash maps) is used.
- Therefore, the space complexity is:

    O(n)

Summary:
---------
| Aspect         | Complexity |
|----------------|------------|
| Time           | O(2^n)     |
| Space          | O(n)       |


____________________________________________________
optimal approach ; if need to count the possibilities always use dp 

Explanation of the DP Solution
------------------------------

We build a 2D table dp of size (n+1) × (k+1), where n = nums.size().  
dp[i][s] represents the number of subsequences among the first i elements (nums[0] through nums[i-1]) that sum to s.

1. Initialization:
   - dp[0][0] = 1  
     (There is exactly one way—the empty subsequence—to achieve sum 0 with zero elements.)
   - dp[0][s] = 0 for all s > 0  
     (You can’t make a positive sum without any elements.)

2. Recurrence Relation:
   For each i from 1 to n, and each sum s from 0 to k:
     dp[i][s] = dp[i−1][s]  
              + (if s ≥ nums[i−1] then dp[i−1][s − nums[i−1]] else 0)

   - dp[i−1][s] counts subsequences that skip nums[i−1].
   - dp[i−1][s − nums[i−1]] (when valid) counts subsequences that include nums[i−1].

3. Answer:
   The final count of subsequences summing to k is dp[n][k].

Time and Space Complexity
-------------------------

Let n = number of elements, k = target sum.

Time Complexity:
  • We fill every cell of an (n+1)×(k+1) table exactly once.
  • Each cell update takes O(1) time.
  ⇒ Total time = O(n × k).

Space Complexity (naïve):
  • We store the full 2D table of size (n+1)×(k+1).
  ⇒ Space = O(n × k).

Space Complexity (optimized to 1D):
  • We can “roll” the table into a single array dp[0…k], updating from s=k down to nums[i−1] in each iteration.
  • This uses only O(k) extra space.
  ⇒ Space = O(k).
