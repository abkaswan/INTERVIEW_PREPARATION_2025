https://leetcode.com/problems/frequency-of-the-most-frequent-element/description/

1838. Frequency of the Most Frequent Element ---

The frequency of an element is the number of times it occurs in an array.

You are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.

Return the maximum possible frequency of an element after performing at most k operations.

 

Example 1:

Input: nums = [1,2,4], k = 5
Output: 3
Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4].
4 has a frequency of 3.
Example 2:

Input: nums = [1,4,8,13], k = 5
Output: 2
Explanation: There are multiple optimal solutions:
- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.
- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.
- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.
Example 3:

Input: nums = [3,9,6], k = 2
Output: 1
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105
1 <= k <= 105



_______________
my approach was this : 
int maxFrequency(vector<int>& nums, int k) {
        //sort the array 
        sort(nums.begin(),nums.end());
        //now take the sliding window approach and try to make
        // let's say for a element nums[i] we will need to see the elements in the left and how much it costs to increase them to nums[i]
        int l = 0, r = 0;
        int n = nums.size(),maxLen = 0;
        int cost = 0;
        
        while(r<n){
            
            cost += (nums[r]-nums[l]);
            while(cost>k){
                
                //reset the cost
                cost -= (nums[r]-nums[l]);
                l++;
            }
            maxLen = max(maxLen,r-l+1);
            r++;
        }
        return maxLen;
    }

but this is wrong because think abut a window 
nums[l] to nums[r] till then we have caclculated , now we have done .....(nums[r-1]-nums[l]) + (nums[r]-nums[l]) but in reality to make this thing valid you needed to do (nums[r]-nums[l]).....(nums[r]-nums[r-2]) + (nums[r]-nums[r-1]) you got the point right ? you are calculating cost wrongly only 

the better approach to calculate cost is 

length of the window* nums[r] == meaning all the elements in the window is nums[r] ==> call it x
total sum of all the elments in windown ==> call it y
cost = x-y , this is the cost 
and in while loop we can just decrease the sum from the window so the cost we dont need to adjust each time.

O(nlogn) and O(1) : tc and sc 

We only use a few integer variables, but some space is used to sort.

The space complexity of the sorting algorithm depends on the implementation of each programming language:
In C++, the sort() function provided by STL uses a hybrid of Quick Sort, Heap Sort and Insertion Sort, with a worst case space complexity of O(logn)
but here the range is small so it takes O(1) time keep in mind.

_______________

can be done using binary serach also think about it how 

O(nlogn) tc
O(n) sc